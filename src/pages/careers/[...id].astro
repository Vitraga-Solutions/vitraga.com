---
import MainLayout from "../../layouts/MainLayout.astro";
import Section from "../../components/sections/Section.astro";
import ErrorPage from "../../components/ui/ErrorPage.astro";
import { marked } from 'marked';
import { getJobById } from "../../lib/supabase";

const { id } = Astro.params;
const jobId = parseInt(id as string);

if (!jobId || isNaN(jobId)) {
  return Astro.redirect('/careers');
}

let job;
let error = false;

try {
  job = await getJobById(jobId);
} catch (err) {
  console.error('Error fetching job:', err);
  error = true;
}

if (error) {
  // Show error page
  return;
}

if (!job) {
  return Astro.redirect('/careers');
}

marked.setOptions({
  breaks: true,
  gfm: true,
});

const htmlDescription = await marked(job.description || '');
---

{error ? (
  <MainLayout title="Error - Job Not Found" description="Unable to load job details">
    <ErrorPage 
      title="Unable to Load Job"
      message="We're having trouble loading this job posting. Please try again later or browse other opportunities."
    />
  </MainLayout>
) : (

<MainLayout title={`${job.title} - Careers`} description={`Apply for ${job.title} position at our company.`}>
  <Section>
    <div class="py-20">
      <!-- Back Button -->
      <div class="mb-8">
        <a 
          href="/careers"
          class="inline-flex items-center text-black hover:text-black-600 transition-colors duration-200 text-sm font-medium"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to Careers
        </a>
      </div>

      <!-- Main Content Grid -->
      <div class="grid lg:grid-cols-2 gap-12">
        <!-- Left Column - Job Description -->
        <div class="space-y-8">
          <div>
            <h1 class="text-3xl md:text-4xl font-bold text-black mb-4">{job.title}</h1>
          </div>

          <!-- Job Description Content -->
          <div class="prose prose-lg max-w-none job-description">
            <div set:html={htmlDescription} />
          </div>
        </div>

        <!-- Right Column - Application Form -->
        <div class="lg:sticky lg:top-8 lg:self-start">
          <div class="bg-[#F3F3F3] rounded-[24px] p-8 border border-dark shadow-[0px_5px_0px_#191a23]">
            <h2 class="text-xl font-bold text-black mb-6">Apply for this Position</h2>
            
            <form id="job-application-form" class="space-y-6">
              <input type="hidden" name="job_id" value={job.id} />
              
              <div id="dynamic-form-fields"></div>
              
              <!-- Submit Button -->
              <button 
                type="submit"
                class="w-full px-6 py-4 bg-black text-white rounded-[14px] hover:bg-gray-800 transition-colors duration-200 font-medium text-lg"
              >
                Submit Application
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </Section>
</MainLayout>
)}

<script define:vars={{ jobFields: job?.fields || [] }}>
  document.addEventListener('DOMContentLoaded', () => {
    const dynamicFields = document.getElementById('dynamic-form-fields');
    const form = document.getElementById('job-application-form');
    
    // Get URL parameters using URLSearchParams (for any additional client-side params)
    const urlParams = new URLSearchParams(window.location.search);
    
    // Generate form fields
    if (dynamicFields && jobFields) {
      jobFields.forEach(field => {
        const fieldElement = createFormField(field);
        dynamicFields.appendChild(fieldElement);
      });
    }
    
    // Handle form submission
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        
        // Show loading state
        submitButton.textContent = 'Submitting...';
        submitButton.disabled = true;
        
        try {
          const formData = new FormData(form);
          
          const response = await fetch('/api/apply', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert('Application submitted successfully! We will get back to you soon.');
            form.reset();
          } else {
            let errorMessage = 'Error submitting application: ';
            if (result.details && Array.isArray(result.details)) {
              errorMessage += result.details.join(', ');
            } else {
              errorMessage += (result.error || 'Unknown error');
            }
            alert(errorMessage);
          }
        } catch (error) {
          console.error('Error submitting application:', error);
          alert('Error submitting application. Please try again.');
        } finally {
          // Reset button state
          submitButton.textContent = originalButtonText;
          submitButton.disabled = false;
        }
      });
    }
  });
  
  function createFormField(field) {
    const fieldContainer = document.createElement('div');
    fieldContainer.className = 'mb-6';
    
    const label = document.createElement('label');
    label.className = 'block text-black mb-2 font-medium';
    label.textContent = field.label + (field.required ? '*' : '');
    
    let input;
    
    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
        input = document.createElement('input');
        input.type = field.type;
        input.name = field.name;
        input.required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-[14px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        input.placeholder = field.label;
        break;
        
      case 'textarea':
        input = document.createElement('textarea');
        input.name = field.name;
        input.required = field.required;
        input.rows = 4;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-[14px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors resize-vertical';
        input.placeholder = field.label;
        break;
        
      case 'select':
        input = document.createElement('select');
        input.name = field.name;
        input.required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-[14px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select ' + field.label;
        input.appendChild(defaultOption);
        
        if (field.options) {
          field.options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option;
            optionElement.textContent = option;
            input.appendChild(optionElement);
          });
        }
        break;
        
      case 'radio':
        input = document.createElement('div');
        input.className = 'space-y-3';
        
        if (field.options) {
          field.options.forEach(option => {
            const radioContainer = document.createElement('div');
            radioContainer.className = 'flex items-center';
            
            const radioInput = document.createElement('input');
            radioInput.type = 'radio';
            radioInput.name = field.name;
            radioInput.value = option;
            radioInput.required = field.required;
            radioInput.className = 'mr-3 w-4 h-4 text-blue-600';
            radioInput.id = `${field.name}_${option}`;
            
            const radioLabel = document.createElement('label');
            radioLabel.textContent = option;
            radioLabel.htmlFor = `${field.name}_${option}`;
            radioLabel.className = 'cursor-pointer text-black';
            
            radioContainer.appendChild(radioInput);
            radioContainer.appendChild(radioLabel);
            input.appendChild(radioContainer);
          });
        }
        break;
        
      case 'checkbox':
        input = document.createElement('div');
        input.className = 'space-y-3';
        
        if (field.options) {
          field.options.forEach(option => {
            const checkboxContainer = document.createElement('div');
            checkboxContainer.className = 'flex items-center';
            
            const checkboxInput = document.createElement('input');
            checkboxInput.type = 'checkbox';
            checkboxInput.name = field.name;
            checkboxInput.value = option;
            checkboxInput.className = 'mr-3 w-4 h-4 text-blue-600';
            checkboxInput.id = `${field.name}_${option}`;
            
            const checkboxLabel = document.createElement('label');
            checkboxLabel.textContent = option;
            checkboxLabel.htmlFor = `${field.name}_${option}`;
            checkboxLabel.className = 'cursor-pointer text-black';
            
            checkboxContainer.appendChild(checkboxInput);
            checkboxContainer.appendChild(checkboxLabel);
            input.appendChild(checkboxContainer);
          });
        }
        break;
        
      case 'file':
        input = document.createElement('input');
        input.type = 'file';
        input.name = field.name;
        input.required = field.required;
        input.accept = field.name === 'resume' ? '.pdf,.doc,.docx' : '*/*';
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-[14px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors file:mr-4 file:py-2 file:px-4 file:rounded-[14px] file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100';
        break;
        
      default:
        input = document.createElement('input');
        input.type = 'text';
        input.name = field.name;
        input.required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-[14px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        break;
    }
    
    fieldContainer.appendChild(label);
    fieldContainer.appendChild(input);
    
    return fieldContainer;
  }
</script>

<style>
  .job-description :global(h1) {
    font-size: 2.5rem;
  }
  
  .job-description :global(h2) {
    font-size: 2rem;
  }
  
  .job-description :global(h3) {
    font-size: 1.5rem;
  }

  .job-description :global(hr) {
    border-color: #D1D5DB; /* Tailwind gray-300 */
    margin: 1.5rem 0;
  }
</style>