---
import MainLayout from "../layouts/MainLayout.astro";
import Section from "../components/sections/Section.astro";
import SectionTitle from "../components/ui/SectionTitle.astro";
import JobCard from "../components/ui/JobCard.astro";
import JobApplicationModal from "../components/ui/JobApplicationModal.astro";

// Sample job data based on the provided schema
const jobs = [
  {
    id: 1,
    title: "Backend Engineer (Node.js / PostgreSQL)",
    description: `# ⚡ Backend Engineer – Node.js / PostgreSQL

We are looking for a **Backend Engineer** who loves designing robust APIs, managing large-scale databases, and ensuring applications run like clockwork.  

---

## 📌 About the Role
You will be working on building APIs, managing cloud infrastructure, and ensuring the backend systems can scale to support thousands of users.  
Expect challenges like **performance optimization, database modeling, and designing fault-tolerant systems**.  

---

## 🔧 Responsibilities
- Architect and develop REST/GraphQL APIs using **Node.js**  
- Write optimized SQL queries for **PostgreSQL**  
- Integrate third-party APIs and services  
- Implement authentication & authorization (JWT, OAuth)  
- Ensure high availability, scalability, and security of backend systems  
- Debug, test, and maintain backend services in production  
- Collaborate with DevOps on CI/CD pipelines  

---

## 🎯 Requirements
- Strong proficiency in **JavaScript/TypeScript (Node.js)**  
- Solid understanding of **PostgreSQL and relational database design**  
- Experience with **Supabase or Firebase** is a big plus  
- Familiarity with **Docker and containerized environments**  
- Knowledge of cloud infrastructure (AWS, GCP, or Azure)  
- Understanding of authentication protocols (JWT, OAuth, SAML)  

---

## 💡 Nice-to-Have
- Knowledge of **Redis, RabbitMQ, Kafka**  
- Hands-on with **Kubernetes**  
- Prior experience in **microservices architecture**  

---

## 🌍 Work Culture
- Fully **remote-friendly**  
- Pair programming & mentorship-driven environment  
- Strong emphasis on **code quality and testing**  
- Monthly learning sessions  

---

## 🎁 Perks & Benefits
- Competitive salary + equity options  
- Health insurance + mental health allowance  
- Paid time off + flexible work hours  
- Yearly tech stipend for hardware/software  

---

**Location:** Hybrid (Bangalore, India) / Remote option available  
**Employment Type:** Full-time  
**Experience Level:** 2–5 years  

---

> If backend scalability, database design, and API performance excite you, this is the right place for you! 🚀`,
    is_active: true,
    fields: [
      {"name": "full_name", "label": "Full Name", "type": "text", "required": true},
      {"name": "email", "label": "Email Address", "type": "email", "required": true},
      {"name": "linkedin", "label": "LinkedIn Profile", "type": "text", "required": false},
      {"name": "github", "label": "GitHub / Portfolio", "type": "text", "required": false},
      {"name": "experience", "label": "Years of Backend Experience", "type": "number", "required": true},
      {"name": "preferred_language", "label": "Preferred Backend Language", "type": "radio", "options": ["Node.js", "Python", "Go", "Java"], "required": true},
      {"name": "db_experience", "label": "Databases You Have Worked With", "type": "checkbox", "options": ["PostgreSQL", "MySQL", "MongoDB", "Redis", "Cassandra"], "required": true},
      {"name": "resume", "label": "Upload Resume (PDF)", "type": "file", "required": true},
      {"name": "cover_letter", "label": "Cover Letter", "type": "textarea", "required": false},
      {"name": "expected_salary", "label": "Expected Salary (INR per annum)", "type": "number", "required": false},
      {"name": "availability", "label": "Notice Period", "type": "select", "options": ["Immediate", "2 Weeks", "1 Month", "More than 1 Month"], "required": true}
    ]
  }
];

const activeJobs = jobs.filter(job => job.is_active);
---

<MainLayout title="Careers - Join Our Team" description="Explore exciting career opportunities and join our innovative team.">
  <Section>
    <div class="py-20">
      <SectionTitle 
        sectionTitle="Join Our Team" 
        description="We're looking for passionate individuals who want to build the future of technology. Explore our open positions and find your next career opportunity."
      />
      
      <div class="grid gap-8 md:grid-cols-1 lg:grid-cols-1">
        {activeJobs.map((job) => (
          <JobCard job={job} />
        ))}
      </div>
      
      {activeJobs.length === 0 && (
        <div class="text-center py-20">
          <h3 class="text-2xl font-medium mb-4">No Open Positions</h3>
          <p class="text-gray-600">We don't have any open positions at the moment, but we're always looking for talented individuals. Feel free to reach out to us!</p>
        </div>
      )}
    </div>
  </Section>
  
  <JobApplicationModal />
</MainLayout>

<script>
  // Handle modal opening
  document.addEventListener('DOMContentLoaded', () => {
    const applyButtons = document.querySelectorAll('[data-apply-job]');
    const modal = document.getElementById('job-application-modal');
    const modalJobTitle = document.getElementById('modal-job-title');
    const modalJobId = document.getElementById('modal-job-id') as HTMLInputElement;
    const applicationForm = document.getElementById('application-form') as HTMLFormElement;
    const dynamicFields = document.getElementById('dynamic-fields');
    
    applyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const jobDataStr = button.getAttribute('data-job');
        if (!jobDataStr) return;
        
        const jobData = JSON.parse(jobDataStr);
        
        // Set modal content
        if (modalJobTitle) modalJobTitle.textContent = jobData.title;
        if (modalJobId) modalJobId.value = jobData.id;
        
        // Clear existing dynamic fields
        if (dynamicFields) dynamicFields.innerHTML = '';
        
        // Generate dynamic form fields
        if (dynamicFields && jobData.fields) {
          jobData.fields.forEach((field: any) => {
            const fieldElement = createFormField(field);
            dynamicFields.appendChild(fieldElement);
          });
        }
        
        // Show modal
        if (modal) {
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      });
    });
    
    // Close modal functionality
    const closeModal = () => {
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }
      if (applicationForm) applicationForm.reset();
    };
    
    const closeButton = document.getElementById('close-modal');
    const modalOverlay = document.getElementById('modal-overlay');
    
    if (closeButton) closeButton.addEventListener('click', closeModal);
    if (modalOverlay) modalOverlay.addEventListener('click', closeModal);
    
    // Form submission
    if (applicationForm) {
      applicationForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Collect form data
        const formData = new FormData(applicationForm);
        const data: Record<string, any> = {};
        
        for (let [key, value] of formData.entries()) {
          if (data[key]) {
            // Handle multiple values (checkboxes)
            if (Array.isArray(data[key])) {
              data[key].push(value);
            } else {
              data[key] = [data[key], value];
            }
          } else {
            data[key] = value;
          }
        }
        
        console.log('Application data:', data);
        
        // Here you would normally send the data to your API
        alert('Application submitted successfully! We will get back to you soon.');
        closeModal();
      });
    }
  });
  
  function createFormField(field: any) {
    const fieldContainer = document.createElement('div');
    fieldContainer.className = 'mb-6';
    
    const label = document.createElement('label');
    label.className = 'block text-black mb-2 font-medium';
    label.textContent = field.label + (field.required ? '*' : '');
    
    let input: HTMLElement;
    
    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
        input = document.createElement('input');
        (input as HTMLInputElement).type = field.type;
        (input as HTMLInputElement).name = field.name;
        (input as HTMLInputElement).required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        (input as HTMLInputElement).placeholder = field.label;
        break;
        
      case 'textarea':
        input = document.createElement('textarea');
        (input as HTMLTextAreaElement).name = field.name;
        (input as HTMLTextAreaElement).required = field.required;
        (input as HTMLTextAreaElement).rows = 4;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors resize-vertical';
        (input as HTMLTextAreaElement).placeholder = field.label;
        break;
        
      case 'select':
        input = document.createElement('select');
        (input as HTMLSelectElement).name = field.name;
        (input as HTMLSelectElement).required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select ' + field.label;
        (input as HTMLSelectElement).appendChild(defaultOption);
        
        if (field.options) {
          field.options.forEach((option: string) => {
            const optionElement = document.createElement('option');
            optionElement.value = option;
            optionElement.textContent = option;
            (input as HTMLSelectElement).appendChild(optionElement);
          });
        }
        break;
        
      case 'radio':
        input = document.createElement('div');
        input.className = 'space-y-2';
        
        if (field.options) {
          field.options.forEach((option: string) => {
            const radioContainer = document.createElement('div');
            radioContainer.className = 'flex items-center';
            
            const radioInput = document.createElement('input');
            radioInput.type = 'radio';
            radioInput.name = field.name;
            radioInput.value = option;
            radioInput.required = field.required;
            radioInput.className = 'mr-3 text-blue-600';
            radioInput.id = `${field.name}_${option}`;
            
            const radioLabel = document.createElement('label');
            radioLabel.textContent = option;
            radioLabel.htmlFor = `${field.name}_${option}`;
            radioLabel.className = 'cursor-pointer';
            
            radioContainer.appendChild(radioInput);
            radioContainer.appendChild(radioLabel);
            input.appendChild(radioContainer);
          });
        }
        break;
        
      case 'checkbox':
        input = document.createElement('div');
        input.className = 'space-y-2';
        
        if (field.options) {
          field.options.forEach((option: string) => {
            const checkboxContainer = document.createElement('div');
            checkboxContainer.className = 'flex items-center';
            
            const checkboxInput = document.createElement('input');
            checkboxInput.type = 'checkbox';
            checkboxInput.name = field.name;
            checkboxInput.value = option;
            checkboxInput.className = 'mr-3 text-blue-600';
            checkboxInput.id = `${field.name}_${option}`;
            
            const checkboxLabel = document.createElement('label');
            checkboxLabel.textContent = option;
            checkboxLabel.htmlFor = `${field.name}_${option}`;
            checkboxLabel.className = 'cursor-pointer';
            
            checkboxContainer.appendChild(checkboxInput);
            checkboxContainer.appendChild(checkboxLabel);
            input.appendChild(checkboxContainer);
          });
        }
        break;
        
      case 'file':
        input = document.createElement('input');
        (input as HTMLInputElement).type = 'file';
        (input as HTMLInputElement).name = field.name;
        (input as HTMLInputElement).required = field.required;
        (input as HTMLInputElement).accept = field.name === 'resume' ? '.pdf,.doc,.docx' : '*/*';
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100';
        break;
        
      default:
        input = document.createElement('input');
        (input as HTMLInputElement).type = 'text';
        (input as HTMLInputElement).name = field.name;
        (input as HTMLInputElement).required = field.required;
        input.className = 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors';
        break;
    }
    
    fieldContainer.appendChild(label);
    fieldContainer.appendChild(input);
    
    return fieldContainer;
  }
</script>
