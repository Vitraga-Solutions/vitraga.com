---
import Section from "../../components/sections/Section.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { supabase } from "../../lib/supabase";

const adminPassword = import.meta.env.JOB_APP_PASS;
const providedPassword = Astro.url.searchParams.get('password');

if (providedPassword !== adminPassword) {
  Astro.redirect('/');
}

// Pagination setup
const itemsPerPage = 10;
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const offset = (currentPage - 1) * itemsPerPage;

// Get total count for pagination
const { count: totalCount, error: countError } = await supabase
  .from('job_applications')
  .select('*', { count: 'exact', head: true });

if (countError) {
  console.error('Error fetching applications count:', countError);
}

const totalPages = Math.ceil((totalCount || 0) / itemsPerPage);

// Generate pagination pages
const generatePaginationPages = () => {
  const pages = [];
  const maxVisiblePages = 5;
  
  if (totalPages <= maxVisiblePages) {
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }
  } else {
    if (currentPage <= 3) {
      for (let i = 1; i <= 5; i++) {
        pages.push(i);
      }
    } else if (currentPage >= totalPages - 2) {
      for (let i = totalPages - 4; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      for (let i = currentPage - 2; i <= currentPage + 2; i++) {
        pages.push(i);
      }
    }
  }
  
  return pages;
};

const paginationPages = generatePaginationPages();

// Fetch applications with job details and pagination
const { data: applications, error } = await supabase
  .from('job_applications')
  .select(`
    *,
    jobs (
      title
    )
  `)
  .order('created_at', { ascending: false })
  .range(offset, offset + itemsPerPage - 1);

if (error) {
  console.error('Error fetching applications:', error);
}
---

{providedPassword !== adminPassword ? (
  <MainLayout title="Admin Access" description="Admin panel for job applications">
    <Section>
      <div class="py-20 max-w-md mx-auto">
        <h1 class="text-2xl font-bold mb-6">Admin Access</h1>
        <form method="GET" class="space-y-4">
          <div>
            <label for="password" class="block text-sm font-medium mb-2">Password:</label>
            <input
              type="password"
              name="password"
              id="password"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <button
            type="submit"
            class="w-full px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors"
          >
            Access Admin Panel
          </button>
        </form>
      </div>
    </Section>
  </MainLayout>
) : (
  <MainLayout title="Job Applications Admin" description="Manage job applications">
    <Section>
      <div class="py-20">
        <div class="flex justify-between items-center mb-8">
          <h1 class="text-3xl font-bold">Job Applications</h1>
          <div class="text-sm text-gray-600">
            {totalCount ? (
              <span>
                Showing {Math.min(offset + 1, totalCount || 0)} - {Math.min(offset + itemsPerPage, totalCount || 0)} of {totalCount} applications
              </span>
            ) : null}
          </div>
        </div>
        
        {applications && applications.length > 0 ? (
          <>
            <div class="space-y-6">
              {applications.map((app: any) => (
                <div class="bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                  <div class="flex justify-between items-start mb-4">
                    <div>
                      <h3 class="text-lg font-semibold">
                        Application for: {app.jobs?.title || `Job ID ${app.job_id}`}
                      </h3>
                      <p class="text-sm text-gray-600">
                        Applied on: {new Date(app.created_at).toLocaleDateString()}
                      </p>
                    </div>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                      ID: {app.id}
                    </span>
                  </div>
                  
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries(app.data).map(([key, value]: [string, any]) => (
                      <div>
                        <strong class="text-sm text-gray-700 capitalize">
                          {key.replace(/_/g, ' ')}:
                        </strong>
                        <p class="text-sm">
                          {key === 'resume_url' && value ? (
                            <a 
                              href={value} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              class="text-blue-600 hover:text-blue-800 underline"
                            >
                              View Resume
                            </a>
                          ) : Array.isArray(value) ? (
                            value.join(', ')
                          ) : (
                            value
                          )}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
            
            {/* Pagination Controls */}
            {totalPages > 1 && (
              <div class="mt-8 flex justify-center">
                <nav class="flex items-center space-x-2">
                  {/* Previous Button */}
                  {currentPage > 1 ? (
                    <a
                      href={`?password=${providedPassword}&page=${currentPage - 1}`}
                      class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
                    >
                      Previous
                    </a>
                  ) : (
                    <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                      Previous
                    </span>
                  )}
                  
                  {/* First page */}
                  {currentPage > 3 && totalPages > 5 && (
                    <a
                      href={`?password=${providedPassword}&page=1`}
                      class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
                    >
                      1
                    </a>
                  )}
                  
                  {/* Left ellipsis */}
                  {currentPage > 4 && totalPages > 5 && (
                    <span class="px-2 text-gray-400">...</span>
                  )}
                  
                  {/* Page numbers */}
                  {paginationPages.map((pageNum) => {
                    const isCurrentPage = pageNum === currentPage;
                    
                    return isCurrentPage ? (
                      <span class="px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-md">
                        {pageNum}
                      </span>
                    ) : (
                      <a
                        href={`?password=${providedPassword}&page=${pageNum}`}
                        class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
                      >
                        {pageNum}
                      </a>
                    );
                  })}
                  
                  {/* Right ellipsis */}
                  {currentPage < totalPages - 3 && totalPages > 5 && (
                    <span class="px-2 text-gray-400">...</span>
                  )}
                  
                  {/* Last page */}
                  {currentPage < totalPages - 2 && totalPages > 5 && (
                    <a
                      href={`?password=${providedPassword}&page=${totalPages}`}
                      class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
                    >
                      {totalPages}
                    </a>
                  )}
                  
                  {/* Next Button */}
                  {currentPage < totalPages ? (
                    <a
                      href={`?password=${providedPassword}&page=${currentPage + 1}`}
                      class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
                    >
                      Next
                    </a>
                  ) : (
                    <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                      Next
                    </span>
                  )}
                </nav>
              </div>
            )}
          </>
        ) : (
          <p class="text-gray-600">No applications found.</p>
        )}
      </div>
    </Section>
  </MainLayout>
)}

<style>
  .capitalize {
    text-transform: capitalize;
  }
</style>
